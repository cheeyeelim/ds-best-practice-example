{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ds-best-practice-example","title":"ds-best-practice-example","text":"<p>Showcase best practices for structuring a simple DS-related Python package/application.</p> <p>If you notice any best practice missing/incorrect, please do let me know and I will update them.</p> <p>This example package will fit a linear regression on your input data. It comes with the <code>diabetes</code> data as a toy data.</p> <p>Note that this example comes with many tools/components to help your development, but do enable/disable them based on your needs.</p> <p>The recommend minimum tools I usually go for in most of my projects are</p> <ul> <li>Poetry - for Python package management</li> <li>Pre-commit - for formating and linting</li> <li>hydra - for package configurations</li> <li>logging - for logging runtime information</li> <li>Pytest - for unit testing</li> </ul> <p>The additional tools are</p> <ul> <li>Mkdocs - for documentation generation</li> <li>Mkdocstrings - for automatic API generation</li> <li>Tox - for testing under multiple environments</li> <li>Codecov - for code coverage report</li> <li>GitHub Actions - for CI/CD</li> <li>GitHub Pages - for documentation hosting</li> </ul>"},{"location":"#related-links","title":"Related links","text":"<ul> <li>Documentation: https://cheeyeelim.github.io/ds-best-practice-example</li> <li>GitHub: https://github.com/cheeyeelim/ds-best-practice-example</li> <li>PyPI: https://pypi.org/project/ds-best-practice-example/</li> <li>Free software: BSD-3-Clause</li> </ul>"},{"location":"#how-to-install-this-package","title":"How to install this package?","text":"<p>The easiest way is to install it with pip.</p> <pre><code>pip install ds-best-practice-example\n</code></pre>"},{"location":"#how-to-run-this-package","title":"How to run this package?","text":"<p>You run this package via both command line and Python.</p> <p>Note that all configurations are specified via <code>hydra</code> in this config yaml.</p> <p>Please refer to the example notebook for more details.</p>"},{"location":"#1-run-via-command-line","title":"(1) Run via command line","text":"<pre><code>poetry run ezml\n</code></pre>"},{"location":"#2-run-via-python","title":"(2) Run via Python","text":"<pre><code>import hydra\n\nfrom ezml.data import prepare_data\nfrom ezml.model import train_model\nfrom ezml.diagnostic import diagnose_model\n\n# Use Hydra config with Compose API\nhydra.initialize(version_base=None, config_path=\"../input/conf\")\ncfg = hydra.compose(\n    config_name=\"config\",\n    overrides=[\"data.file_path=../input/data/diabetes.csv\", \"model.file_path=../output/model/linreg_diabetes.joblib\"]\n)\n\n# Train linear regression with default data\nX_train, X_test, y_train, y_test = prepare_data(cfg)\nmodel = train_model(cfg, X_train, y_train)\ndiagnose_model(X_test, y_test, model)\n</code></pre>"},{"location":"#how-to-develop-this-package-further","title":"How to develop this package further?","text":"<ol> <li>Update codes as needed.</li> <li>Usually I create and test codes in Jupyter notebook (under <code>notebook</code> folder) before manually adapting over to standard Python scripts.</li> <li>(Test locally) Test that codes are working as intended.</li> <li>Test locally (all in one go)<ol> <li><code>poetry run tox</code></li> <li>Internally <code>tox</code> will run unit testing, document generation and build tests.</li> </ol> </li> <li>Test locally (one by one)<ol> <li><code>poetry run pytest</code> for unit testing</li> <li><code>poetry run mike deploy vtest -m \"test doc build\" --ignore</code></li> <li><code>poetry run mike delete vtest -m \"remove doc build\" --ignore</code></li> <li><code>poetry run mkdocs serve</code> to see docs locally</li> <li><code>poetry build</code></li> <li><code>poetry run twine check dist/*</code> to test builds</li> <li>Test on cloud</li> <li>No need to do anything</li> <li>Follow later steps to push the codes to GitHub to trigger tests, as this repo has GitHub Workflows defined (in <code>.github/workflows</code>)</li> </ol> </li> <li>Run <code>pre-commit</code> by committing codes.</li> <li><code>git add .</code></li> <li><code>git commit -m \"a message\"</code></li> <li>Resolve any errors from <code>pre-commit</code> manually.</li> <li>Bump the version number up</li> <li>E.g. for a patch, <code>poetry run bump2version patch</code></li> <li>Rerun git add and commit to commit codes.</li> <li>Once happy with everything, <code>git push</code> the codes to cloud repo.</li> <li>GitHub Actions will be automatically triggered for testing and staging.</li> <li>Wait for GitHub Actions to complete, then check for a published package at https://test.pypi.org/project/ds-best-practice-example/</li> <li>Once all are done, trigger <code>release</code> build by tagging a commit with <code>v*</code> version number.</li> <li>A documentation will be automatically generated at <code>https://cheeyeelim.github.io/ds-best-practice-example</code></li> <li>The package will be built and published to <code>PyPI</code>.</li> <li>Done!</li> </ol>"},{"location":"#how-to-create-this-project-from-scratch","title":"How to create this project from scratch?","text":"<p>You can create it from scratch by following the steps below.</p> <p>The steps assumed <code>cookiecutter</code>, <code>pre-commit</code> and <code>poetry</code> has been installed. Otherwise follow their respective installation instructions to install them.</p> <pre><code># Setup project folder interactively\ncookiecutter https://github.com/cheeyeelim/cookiecutter-pypackage.git\n\n# Setup pre-commit\npre-commit install\n\n# Update pyproject.toml with required packages\n# Install Python packages\npoetry install -E test -E dev -E doc\n</code></pre>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the cheeyeelim/cookiecutter-pypackage project template.</p>"},{"location":"api/","title":"Modules","text":"<p>Top-level package for ezml.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#011---2023-08-12","title":"[0.1.1] - 2023-08-12","text":"<ul> <li>Patched GitHub Actions workflows.</li> </ul>"},{"location":"changelog/#010---2023-08-09","title":"[0.1.0] - 2023-08-09","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>{{ cookiecutter.project_name }} could always use more documentation, whether as part of the official {{ cookiecutter.project_name }} docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>{{ cookiecutter.project_slug }}</code> for local development.</p> <ol> <li>Fork the <code>{{ cookiecutter.project_slug }}</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/{{ cookiecutter.project_slug }}.git\n</code></pre> </li> <li> <p>Ensure poetry is installed.</p> </li> <li> <p>Install dependencies and start your virtualenv:</p> <pre><code>$ poetry install -E test -E doc -E dev\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</p> <pre><code>$ poetry run tox\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.7, 3.8 and 3.9. Check    https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<pre><code>$ poetry run pytest tests/test_{{ cookiecutter.pkg_name }}.py\n</code></pre> <p>To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>$ poetry run bump2version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install ds-best-practice-example, run this command in your terminal:</p> <pre><code>$ pip install ds-best-practice-example\n</code></pre> <p>This is the preferred method to install ds-best-practice-example, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for ds-best-practice-example can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone git://github.com/cheeyeelim/ds-best-practice-example\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/cheeyeelim/ds-best-practice-example/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>To use ds-best-practice-example in a project</p> <pre><code>import ezml\n</code></pre>"}]}